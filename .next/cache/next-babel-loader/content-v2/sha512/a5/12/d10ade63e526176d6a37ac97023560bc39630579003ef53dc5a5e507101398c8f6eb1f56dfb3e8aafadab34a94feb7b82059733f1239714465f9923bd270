{"ast":null,"code":"import { useMemo, useRef, useState } from \"react\";\n\nconst useCalendar = ({\n  dateUtils,\n  defaultDate\n}) => {\n  const utilsRef = useRef(dateUtils);\n  const {\n    0: date,\n    1: setDate\n  } = useState(defaultDate || dateUtils.date());\n  return useMemo(() => {\n    const utils = utilsRef.current;\n    const first = utils.startOfWeek(utils.startOfMonth(date));\n    const last = utils.endOfWeek(utils.endOfMonth(date));\n    const days = [];\n    let curr = first;\n\n    while (utils.isBefore(curr, last)) {\n      days.push({\n        date: curr,\n        dayOfMonth: utils.format(curr, \"dayOfMonth\"),\n        isOutsideMonth: !utils.isSameMonth(date, curr),\n        isToday: utils.isSameDay(curr, utils.date())\n      });\n      curr = utils.addDays(curr, 1);\n    }\n\n    return {\n      date,\n      month: {\n        month: utils.format(date, \"month\"),\n        monthAndYear: utils.format(date, \"monthAndYear\")\n      },\n      weekdays: utils.getWeekArray(date)[0].map(date => ({\n        weekday: utils.format(date, \"weekday\"),\n        weekdayShort: utils.format(date, \"weekdayShort\")\n      })),\n      days,\n      navigatePrev: () => setDate(utils.addMonths(date, -1)),\n      navigateNext: () => setDate(utils.addMonths(date, 1))\n    };\n  }, [date]);\n};\n\nexport default useCalendar;","map":{"version":3,"sources":["/Users/Stuart/workspace/use-calendar/src/use-calendar.ts"],"names":["useMemo","useRef","useState","useCalendar","dateUtils","defaultDate","utilsRef","date","setDate","utils","current","first","startOfWeek","startOfMonth","last","endOfWeek","endOfMonth","days","curr","isBefore","push","dayOfMonth","format","isOutsideMonth","isSameMonth","isToday","isSameDay","addDays","month","monthAndYear","weekdays","getWeekArray","map","weekday","weekdayShort","navigatePrev","addMonths","navigateNext"],"mappings":"AACA,SAASA,OAAT,EAAkBC,MAAlB,EAA0BC,QAA1B,QAA0C,OAA1C;;AAiCA,MAAMC,WAAW,GAAG,CAAkB;AACpCC,EAAAA,SADoC;AAEpCC,EAAAA;AAFoC,CAAlB,KAG2B;AAC7C,QAAMC,QAAQ,GAAGL,MAAM,CAACG,SAAD,CAAvB;AACA,QAAM;AAAA,OAACG,IAAD;AAAA,OAAOC;AAAP,MAAkBN,QAAQ,CAACG,WAAW,IAAID,SAAS,CAACG,IAAV,EAAhB,CAAhC;AAEA,SAAOP,OAAO,CAAC,MAAM;AACnB,UAAMS,KAAK,GAAGH,QAAQ,CAACI,OAAvB;AACA,UAAMC,KAAK,GAAGF,KAAK,CAACG,WAAN,CAAkBH,KAAK,CAACI,YAAN,CAAmBN,IAAnB,CAAlB,CAAd;AACA,UAAMO,IAAI,GAAGL,KAAK,CAACM,SAAN,CAAgBN,KAAK,CAACO,UAAN,CAAiBT,IAAjB,CAAhB,CAAb;AACA,UAAMU,IAAkB,GAAG,EAA3B;AAEA,QAAIC,IAAI,GAAGP,KAAX;;AACA,WAAOF,KAAK,CAACU,QAAN,CAAeD,IAAf,EAAqBJ,IAArB,CAAP,EAAmC;AACjCG,MAAAA,IAAI,CAACG,IAAL,CAAU;AACRb,QAAAA,IAAI,EAAEW,IADE;AAERG,QAAAA,UAAU,EAAEZ,KAAK,CAACa,MAAN,CAAaJ,IAAb,EAAmB,YAAnB,CAFJ;AAGRK,QAAAA,cAAc,EAAE,CAACd,KAAK,CAACe,WAAN,CAAkBjB,IAAlB,EAAwBW,IAAxB,CAHT;AAIRO,QAAAA,OAAO,EAAEhB,KAAK,CAACiB,SAAN,CAAgBR,IAAhB,EAAsBT,KAAK,CAACF,IAAN,EAAtB;AAJD,OAAV;AAMAW,MAAAA,IAAI,GAAGT,KAAK,CAACkB,OAAN,CAAcT,IAAd,EAAoB,CAApB,CAAP;AACD;;AAED,WAAO;AACLX,MAAAA,IADK;AAELqB,MAAAA,KAAK,EAAE;AACLA,QAAAA,KAAK,EAAEnB,KAAK,CAACa,MAAN,CAAaf,IAAb,EAAmB,OAAnB,CADF;AAELsB,QAAAA,YAAY,EAAEpB,KAAK,CAACa,MAAN,CAAaf,IAAb,EAAmB,cAAnB;AAFT,OAFF;AAMLuB,MAAAA,QAAQ,EAAErB,KAAK,CAACsB,YAAN,CAAmBxB,IAAnB,EAAyB,CAAzB,EAA4ByB,GAA5B,CAAiCzB,IAAD,KAAW;AACnD0B,QAAAA,OAAO,EAAExB,KAAK,CAACa,MAAN,CAAaf,IAAb,EAAmB,SAAnB,CAD0C;AAEnD2B,QAAAA,YAAY,EAAEzB,KAAK,CAACa,MAAN,CAAaf,IAAb,EAAmB,cAAnB;AAFqC,OAAX,CAAhC,CANL;AAULU,MAAAA,IAVK;AAWLkB,MAAAA,YAAY,EAAE,MAAM3B,OAAO,CAACC,KAAK,CAAC2B,SAAN,CAAgB7B,IAAhB,EAAsB,CAAC,CAAvB,CAAD,CAXtB;AAYL8B,MAAAA,YAAY,EAAE,MAAM7B,OAAO,CAACC,KAAK,CAAC2B,SAAN,CAAgB7B,IAAhB,EAAsB,CAAtB,CAAD;AAZtB,KAAP;AAcD,GA/Ba,EA+BX,CAACA,IAAD,CA/BW,CAAd;AAgCD,CAvCD;;AAyCA,eAAeJ,WAAf","sourcesContent":["import { IUtils } from \"@date-io/core/IUtils\";\nimport { useMemo, useRef, useState } from \"react\";\n\nexport interface Month {\n  month: string;\n  monthAndYear: string;\n}\n\nexport interface Weekday {\n  weekday: string;\n  weekdayShort: string;\n}\n\nexport interface Day<TDate> {\n  date: TDate;\n  dayOfMonth: string;\n  isOutsideMonth: boolean;\n  isToday: boolean;\n}\n\nexport interface Calendar<TDate> {\n  readonly date: TDate;\n  readonly month: Month;\n  readonly weekdays: Weekday[];\n  readonly days: Day<TDate>[];\n  readonly navigatePrev: () => void;\n  readonly navigateNext: () => void;\n}\n\nexport interface CalendarOptions<TDate> {\n  dateUtils: IUtils<TDate>;\n  defaultDate?: TDate;\n}\n\nconst useCalendar = <TDate = unknown>({\n  dateUtils,\n  defaultDate,\n}: CalendarOptions<TDate>): Calendar<TDate> => {\n  const utilsRef = useRef(dateUtils);\n  const [date, setDate] = useState(defaultDate || dateUtils.date());\n\n  return useMemo(() => {\n    const utils = utilsRef.current;\n    const first = utils.startOfWeek(utils.startOfMonth(date));\n    const last = utils.endOfWeek(utils.endOfMonth(date));\n    const days: Day<TDate>[] = [];\n\n    let curr = first;\n    while (utils.isBefore(curr, last)) {\n      days.push({\n        date: curr,\n        dayOfMonth: utils.format(curr, \"dayOfMonth\"),\n        isOutsideMonth: !utils.isSameMonth(date, curr),\n        isToday: utils.isSameDay(curr, utils.date()),\n      });\n      curr = utils.addDays(curr, 1);\n    }\n\n    return {\n      date,\n      month: {\n        month: utils.format(date, \"month\"),\n        monthAndYear: utils.format(date, \"monthAndYear\"),\n      },\n      weekdays: utils.getWeekArray(date)[0].map((date) => ({\n        weekday: utils.format(date, \"weekday\"),\n        weekdayShort: utils.format(date, \"weekdayShort\"),\n      })),\n      days,\n      navigatePrev: () => setDate(utils.addMonths(date, -1)),\n      navigateNext: () => setDate(utils.addMonths(date, 1)),\n    };\n  }, [date]);\n};\n\nexport default useCalendar;\n"]},"metadata":{},"sourceType":"module"}